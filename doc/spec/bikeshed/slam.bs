<pre class='metadata'>
Title: Simultaneous Localization and Mapping
Shortname: SLAM
Level: 1
Status: LS
URL: https://github.com/01org/node-realsense
Editor: Lisha Guo
Editor: Donna Wu
Repository: https://github.com/01org/node-realsense
Abstract: This specification describes Simultaneous Localization And Mapping(SLAM) JavaScript API for Intel® RealSense™ camera.
Markup Shorthands: css no, markdown yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp
</pre>

<pre class=link-defaults>
spec:html; type:element;
    text:a
    text:script
    text:style
</pre>

<style>
table {
  text-indent: 20px;
  word-wrap: normal;
  overflow-wrap: normal;
  hyphens: manual;
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}

li {list-style-type: none;}
</style>

Introduction {#introduction}
========================

Interfaces described in this document are exposed through <code>slam</code> module.

Interface {#interface}
========================



<dfn>Module</dfn> {#moduleInterface}
----------------------------

<pre class="idl">
partial interface Module {
  static Promise&lt;Instance&gt; createInstance();
};
</pre>

### Methods ### {#methods-moduleInterface}
: {{createInstance}}
:: Use this static method to create an SLAM instance, the state of this instance will be "ready" if succeed. A SLAM instance is a running unit that can connect to an Intel® RealSense™ camera and perform localization and mapping algorithm.

:: *Return type*: <code>Promise&lt;[=Instance=]&gt;</code>


<dfn>Instance</dfn> {#instance}
----------------------------

<pre class="idl">
interface Instance {
  readonly attribute SlamState state;
  Promise&lt;CameraOptions&gt; getCameraOptions();
  Promise&lt;InstanceOptions&gt; getInstanceOptions();
  Promise&lt;void&gt; setCameraOptions(CameraOptions options);
  Promise&lt;void&gt; setInstanceOptions(optional InstanceOptions options);
  Promise&lt;void&gt; reset();
  Promise&lt;void&gt; start();
  Promise&lt;void&gt; stop();
  Promise&lt;void> restartTracking();
  Promise&lt;sequence&lt;OccupancyMapData>> getOccupancyMap(optional RegionOfInterest roi);
  Promise&lt;sequence&lt;OccupancyMapData>> getOccupancyMapUpdate(optional RegionOfInterest roi);
  Promise&lt;MapImage&gt; getOccupancyMapAsRgba(boolean drawPoseTrajectory, boolean drawOccupancyMap);
  Promise&lt;OccupancyMapBounds&gt; getOccupancyMapBounds();
  Promise&lt;TrackingResult&gt; getTrackingResult();
  Promise&lt;void&gt; loadOccupancyMap(String mapFileName);
<<<<<<< HEAD
  Promise&lt;void&gt; saveOccupancyMap(String mapFileName);
  Promise&lt;void&gt; saveOccupancyMapAsPpm(String mapFileName, bool drawCameraTrajectory);
  Promise&lt;void> loadRelocalizationMap(String mapFileName);
  Promise&lt;void> saveRelocalizationMap(String mapFileName);
  Promise&lt;sequence&lt;float>> getRelocalizationPose();  // Note: not supported yet.
=======
  Promise&lt;String&gt; saveOccupancyMap(optional String mapFileName);
  Promise&lt;String&gt; saveOccupancyMapAsPpm(optional String mapFileName, optional bool drawCameraTrajectory);
  Promise&lt;void> loadRelocalizationMap(String mapFileName);  // Note: not supported yet.
  Promise&lt;String> saveRelocalizationMap(optional String mapFileName);  // Note: not supported yet.
  Promise&lt;sequence&lt;float>> getRelocalizationPose();
>>>>>>> 03f52c4... [SLAM] Add support for getRelocalizationPose

  attribute EventHandler ontracking;
  attribute EventHandler onerror;
};
</pre>

### Attributes ### {#attributes-1}
* {{state}} of type [=SlamState=], readonly
* &nbsp;&nbsp;&nbsp;&nbsp;Current working state of slam module.

### Methods ### {#methods-1}
: {{start}}
:: Start SLAM instance, the state will be changed to "tracking" if succeed. The module will track the camera's position and create the occupancy map.
:: This method returns a promise. The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

:: *Return type*:Promise&lt;[=void=]&gt;

: {{stop}}
:: Stop SLAM instance, the state will be changed to "ready" if succeed. The module will stop tracking and mapping.
:: This method returns a promise. The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

:: *Return type*:Promise&lt;[=void=]&gt;

: {{reset}}
:: Reset the SLAM instance, the state will be changed to "ready" if succeed. It somewhat do things like <code>stop</code>, but it will reset all the options, including instance options and camera options.
:: This method returns a promise. The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

:: *Return type*:Promise&lt;[=void=]&gt;

: {{restartTracking}}
:: Restarts SLAM with pose aligned to gravity. Camera and module configurations will not be changed.
:: This method returns a promise. The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

:: *Return type*:Promise&lt;[=void=]&gt;

: {{getCameraOptions}}
:: Get the camera configure.
:: This method returns a promise. The promise will be fulfilled with current [=CameraOptions=] containing ImageStreamConfig and MotionSensorConfig if there are no errors. The promise will be rejected with the Exception object if there is a failure.
:: *No parameters.*
:: *Return type*:Promise&lt;[=CameraOptions=]&gt;

: {{getTrackingResult}}
:: Get the tracked result and the source frame data, including fisheye image, depth image and motion source.
:: This method returns a promise. The promise will be fulfilled with a [=TrackingResult=] object if there are no errors. The promise will be rejected with the Exception object if there is a failure.
:: *No parameters.*
:: *Return type*:Promise&lt;[=TrackingResult=]&gt;

: {{setCameraOptions}}
:: Set the camera configure.
:: This method returns a promise. The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/setCameraOptions(CameraOptions options)">
    options: The camera configure containing the image stream configure for color, depth, fisheye and the motion sensor configure for accelerator, gyroscope.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{getInstanceOptions}}
:: Get the instance configure.
:: This method returns a promise. The promise will be fulfilled with current          [=InstanceOptions=] if there are no errors. The promise will be rejected with the Exception object if there is a failure.
:: *No parameters.*
:: *Return type*:Promise&lt;[=InstanceOptions=]&gt;

: {{setInstanceOptions}}
:: Set the instance configure.
:: This method returns a promise. The promise will be fulfilled if there are no errors.The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/setInstanceOptions(optional InstanceOptions options)">
    options: The InstanceOptions is used to config whether enableOccupancyMapBuilding, enableRelocalizationMapping, enbleForceRelocalozationPose. Besides, it also can set the HeightofInterest and Resolution for occupancy map.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{saveOccupancyMap}}
:: Saves the occupancy map to a specified file. Saved occupancy map can be loaded later by calling loadOccupancyMap(...).
:: This method returns a promise.The promise will be fulfilled with the full path name of the file if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/saveOccupancyMap(String mapFileName)">
    mapFileName: The full or relative path name of a file for sorting values of the current occupancy grid that can be later restored.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{saveOccupancyMapAsPpm}}
:: Saves the occpuancy map as a PPM file with following color codes. Unknown cells are colored white and 100% occupied cells are colored red. Black(0,0,0) pixels represent traversed but 0% occupied(unoccupied) cells. All values are scaled linearly between 0 to 255.
:: This method returns a promise.The promise will be fulfilled with the full path name of the file if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/saveOccupancyMapAsPpm(String mapFileName)">
  mapFileName: The full or relative path name of a file for sorting values of the current occupancy grid that can be later restored.
  drawCameraTrajectory: A flag to specify whether to include camera trajectory in the occpuancy map image. If enabled, camera trajectory will be drawn in green(0,255,0) color.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{loadOccupancyMap}}
:: To load occpuancy map from specified occupancy map file which was created using saveOccupancyMap(...).
:: This method returns a promise.The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/loadOccupancyMap(String mapFileName)">
  mapFileName: This is the full path name of a file from which to load and retore the occupancy map.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{getOccupancyMap}}
:: Gets occupancy map within specified region of interest or returns ALL the tiles in the occupancy map construction that have occupancy values if no region of interest passed.
:: This method returns a promise.The promise will be fulfilled with an object of OccupancyMapData which containing all tiles in the occupancy map construction that have occpuancy values if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/getOccupancyMap(optional RegionOfInterest roi)">
  roi: minimum point(minX, minY) and maximum point(maxX, maxY) co-ordinate of region of interest. Range values are in the same unit as the resolution value.
</pre>

:: *Return type*:Promise&lt;[=OccupancyMap=]&gt;

: {{getOccupancyMapUpdate}}
:: To obtain the occupancy map data that have been modified since the last successful call to getOccupancymapUpdate() when [=enableOccpuancymapBuilding=] is true.
:: This method returns a promise.The promise will be fulfilled with an object of OccupancyMap which containing all tiles in the occupancy map construction that have occpuancy valuesif there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/getOccupancyMapUpdate(optional RegionOfInterest roi)">
  roi: minimum point of (minX, minY) and maximum of (maxX, maxY) co-ordinate of region of interest. Range values are in the same unit as the resolution value.
</pre>

:: *Return type*:Promise&lt;[=OccupancyMap=]&gt;

: {{getOccupancyMapAsRgba}}
:: To obtain a representation of the occupancy map as an RGBA image.
:: This method returns a promise.The promise will be fulfilled with an object of MapImage if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/getOccupancyMapAsRgba(boolean drawPoseTrajectory, boolean drawOccupancyMap)">
  drawPoseTrajectory: pass 1 to draw the pose trajectory over time, otherwise 0.
  drawOccupancyMap: pass 1 to draw the occupancy map, otherwise 0.
</pre>

:: *Return type*:Promise&lt;[=MapImage=]&gt;

: {{getOccupancyMapBounds}}
:: getOccupancyMapBounds gets the boundaries of the occupancy map in tile units.
:: This method returns a promise.The promise will be fulfilled with an object of OccupancyMapBounds if there are no errors. The promise will be rejected with the Exception object if there is a failure.

:: *Return type*:Promise&lt;[=OccupancyMapBounds=]&gt;

: {{saveRelocalizationMap}}
:: Saves the current re-localization map data to a given file. Saved re-localization map can be loaded later by calling loadRelocalizationMap(...).
:: This method returns a promise.The promise will be fulfilled with the full path name of the file if there are no errors. The promise will be rejected with the           Exception object if there is a failure.

<pre class='argumentdef' for="Instance/saveRelocalizationMap(String mapFileName)">
  mapFileName: The full or relative path name of a file where to save current re-localization map.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{loadRelocalizationMap}}
:: To load re-localization map from a given file which was created using saveRelocalizationMap(...).
:: This method returns a promise.The promise will be fulfilled if there are no errors. The promise will be rejected with the Exception object if there is a failure.

<pre class='argumentdef' for="Instance/loadRelocalizationMap(String mapFileName)">
  mapFileName: This is the full path name of a file from which to load and retore the re-localization map.
</pre>

:: *Return type*:Promise&lt;<a>void</a>&gt;

: {{getRelocalizationPose}}
:: To get the relocalizer pose for the last tracked frame.
:: This method returns a promise.The promise will be fulfilled with the relocalization pose if there are no errors. The promise will be rejected with the Exception object if there is a failure.
:: *No parameters.*
:: *Return type*:Promise&lt;sequence&lt;<a>float</a>>>


### Events ### {#events-1}

: {{ontracking}}
:: This event will be fired when a frame has been successfully processed and a new camera pose has been tracked. A registered callback will get a [=TrackingEvent=] object as argument.
:: Note: this is just a notation, the underlying mechanism is the `EventEmitter` of `Node.js`, please use `instance.on('tracking', function(e) { ... })` to handle the event

: {{onerror}}
:: This event will be fired when there is a unexpected error happened. A registered callback will get a <a>string</a> type error message.
:: Note: this is just a notation, the underlying mechanism is the `EventEmitter` of `Node.js`, please use `instance.on('error', function(e) { ... })` to handle the event


### <dfn>MapImage</dfn> Interface ### {#MapImage}

<pre class='idl'>
interface MapImage {
  readonly attribute unsigned long width;
  readonly attribute unsigned long height;
  readonly attribute Uint8Array data;
};
</pre>

#### Attributes
* {{width}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Receives the image width in pixels

* {{height}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Receives the image Height in pixels

* {{data}} of type <a>Uint8Array</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Store the resulting output image

### <dfn>OccupancyMap</dfn> Interface ### {#OccupancyMap}

<pre class='idl'>
interface OccupancyMapData {
  readonly attribute boolean isDataPending;
  readonly attribute long tileCount;
  readonly attribute Int32Array data;
};
</pre>

#### Attributes
* {{isDataPending}} of type <a>boolean</a>
* &nbsp;&nbsp;&nbsp;&nbsp;If the OccupancyMap object cannot accommodate all the available tiles, isDatatPending will be set to false. In this case, make an additional call later to getOccupancyMapUpdate or getOccupancyMap to fetch remaining tiles.

* {{tileCount}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;The count of tiles for occupancy map.

* {{data}} of type <a>Int32Array</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Container to store the occupancy map.

### <dfn>OccupancyMapBounds</dfn> Interface ### {#OccupancyMapBounds}

<pre class='idl'>
interface OccupancyMapBounds {
  readonly attribute long minX;
  readonly attribute long minZ;
  readonly attribute long maxX;
  readonly attribute long maxZ;
};
</pre>

#### Attributes
* {{minX}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Stored the minimum tile seen on the X-axis.
* {{minZ}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Stored the minimum tile seen on the Z-axis.
* {{maxX}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Stored the maximum tile seen on the X-axis
* {{maxZ}} of type <a>long</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Stored the maximum tile seen on the Z-axis

### <dfn>TrackingResult</dfn> Interface ### {#trackingResult}
<pre class='idl'>
interface TrackingResult {
  readonly attribute TrackingAccuracy accuracy;
  readonly attribute float[] cameraPose;
  readonly attribute FrameData frameData;
};
</pre>

#### Attributes
* {{accuracy}} of type [=TrackingAccuracy=], readonly
* &nbsp;&nbsp;&nbsp;&nbsp;Current state of confidence in camera pose estimation
* {{cameraPose}} of type <a>float</a> array, readonly
* &nbsp;&nbsp;&nbsp;&nbsp;Current camera pose

#### Methods

: {{getFrameData}}
:: To obtain the latest frame of data, including image stream and motion samples.
:: This method returns a promise.The promise will be fulfilled with the latest frame of data if there are no errors. The promise will be rejected with the Exception object if there is a failure.
:: *No parameters.*
:: *Return type*:Promise&lt;<a>void</a>&gt;

### <dfn>EventInfo</dfn> Interface ### {#eventInfo}
<pre class='idl'>
interface EventInfo {
  readonly attribute TrackingAccuracy accuracy;
  readonly attribute float[] cameraPose;
};
</pre>

#### Attributes
* {{accuracy}} of type [=TrackingAccuracy=], readonly
* &nbsp;&nbsp;&nbsp;&nbsp;Current state of confidence in camera pose estimation
* {{cameraPose}} of type <a>float</a> array, readonly
* &nbsp;&nbsp;&nbsp;&nbsp;Current camera pose

### <dfn>TrackingEvent</dfn> Interface ### {#trackingEvent}
<pre class='idl'>
interface TrackingEvent {
  readonly attribute String eventName;
  readonly attribute EventInfo data;
};
</pre>

#### Attributes
* {{eventName}} of type <a>String</a>, readonly
* &nbsp;&nbsp;&nbsp;&nbsp;The name of the tracking event.
* {{data}} of type [=EventInfo=], readonly
* &nbsp;&nbsp;&nbsp;&nbsp;The data carried by the tracking event.

Dictionaries {#dictionaries}
========================

<dfn>InstanceOptions</dfn> {#instanceOptions}
----------------------------

<pre class='idl'>
dictionary InstanceOptions {
  boolean enableOccupancyMapBuilding;
  RangeOfInterest occupancyMapHeightOfInterest;
  RangeOfInterest occupancyMapDepthOfInterest;
  float occupancyMapResolution;
  boolean enableRelocalizationMapping;
  boolean enableForceRelocalizationPose;
};
</pre>

### Dictionary [=InstanceOptions=] Members### {#instanceOptions}

* {{enableOccupancyMapBuilding}} of type <a>boolean</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Enable or disable the automatic oocpuancy map building. By default, automatic map building is enbled. When it is enabled, new coming frame data will also update the occpuancy map. To manually build occupancy map with updateOccupancyMap, enableOccpuancyMapBuilding should be set to false.

* {{occupancyMapHeightOfInterest}} of type [=RangeOfInterest=]
* &nbsp;&nbsp;&nbsp;&nbsp;Set the vertical range of interest for the occpuancy map. Regions outside this vertical range are ignored.

* {{occupancyMapDepthOfInterest}} of type [=RangeOfInterest=]
* &nbsp;&nbsp;&nbsp;&nbsp;Set the depth range of interest for the occpuancy map. Regions outside this range are ignored.

* {{enableRelocalizationMapping}} of type <a>boolean</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Enable to start the re-localization mapping process.

* {{enableForceRelocalizationPose}} of type <a>boolean</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Set whether to use relocalization pose in tracking or not when relocalization mapping is running.By default, relocalization will overwrite the tracker pose.

<xmp class='note'>
 Note: All members except occupancyMapHeightOfInterest listed above can not be modified after invoking start().
</xmp>

### Dictionary [=RangeOfInterest=] Members### {#RangeOfInterest}

* {{enableOccupancyMapBuilding}} of type <a>boolean</a>
* &nbsp;&nbsp;&nbsp;&nbsp;Enable or disable the automatic oocpuancy map building. By default, automatic map building is enbled. When it is enabled, new coming frame data will also update the occpuancy map. To manually build occupancy map with updateOccupancyMap, enableOccpuancyMapBuilding should be set to false.

* {{occupancyMapHeightOfInterest}} of type [=RangeOfInterest=]
* &nbsp;&nbsp;&nbsp;&nbsp;Set the vertical range of interest for the occpuancy map. Regions outside this vertical range are ignored.

Enumerators {#enumerators}
========================

<dfn>TrackingAccuracy</dfn> enum {#trackingAccuary}
----------------------------

<pre class='idl'>
enum TrackingAccuracy {
  "low",
  "med",
  "high",
  "failed"
};
</pre>

<table class='data'>
  <thead><tr><th>Member<th>Definition
  <tbody>
    <tr>
       <td>{{"low"}}
       <td>Low confidence in camera pose estimation.
    <tr>
       <td>{{"med"}}
       <td>Medium confidence in camera pose estimation.
    <tr>
       <td>{{"high"}}
       <td>High confidence in camera pose estimation.
    <tr>
       <td>{{"failed"}}
       <td>No confidence in camera pose estimation.
</table>

<dfn>SlamState</dfn> enum {#slamState}
----------------------------
<pre class='idl'>
enum SlamState {
  "ready",
  "tracking",
  "paused",
};
</pre>

<table class='data'>
  <thead><tr><th>Member<th>Definition
  <tbody>
    <tr>
       <td>{{"ready"}}
       <td>The slam module has been configured and start.
    <tr>
       <td>{{"tracking"}}
       <td>The slam module is under the tracking work.
    <tr>
       <td>{{"paused"}}
       <td>The tracking work is paused.
</table>

Examples {#examples}
========================

<pre class='example'>
let slamModule = require('slam');

let slam;
slamModule.createInstance().then((instance) => {
  slam = instance;

  let slamOptions = {
    occupancyMapResolution: 0.025,
  };
  return slam.setInstanceOptions(slamOptions);
}).then(() => {
  console.log('Starting SLAM...');
  slam.on('tracking', (result) => {
    printTrackingResult(result);
  });
  return slam.start();
}).catch((error) => {
  console.log('error: ' + error);
});

function printTrackingResult(result) {
  let pose = result.cameraPose;
  let accuracy = result.accuracy;
  slam.getOccupancyMapUpdate().then((mapData) => {
    let countUpdatedTiles = mapData.tileCount;
    console.log(`Translation:(X=${pose[3].toPrecision(2)}, Y=${pose[7].toPrecision(2)}, Z=${pose[11].toPrecision(2)})` +
        `    Accuracy: ${accuracy}    Tiles_Updated: ${countUpdatedTiles}`);
  });
}

console.log('\n-------- Press Esc key to exit --------\n');

const ESC_KEY = '\u001b';
const CTRL_C = '\u0003';
let stdin = process.stdin;
stdin.setRawMode(true);
stdin.resume();
stdin.setEncoding('utf8');
stdin.on('data', function(key) {
  if (key === ESC_KEY || key === CTRL_C) {
    exit();
  }
});

function exit() {
  if (slam) {
    console.log('Saving occupancy map to disk...');
    slam.saveOccupancyMapAsPpm('occupancy.ppm', true).then(() => {
      console.log('Stopping...');
      return slam.stop();
    }).then(() => {
      process.exit();
    }).catch((error) => {
      console.log('error: ' + error);
      process.exit();
    })
  } else {
    process.exit();
  }
}
</pre>
